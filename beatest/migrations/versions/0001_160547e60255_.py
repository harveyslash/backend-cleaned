"""Initial Database state. Added just after migrating to modular

Revision ID: 160547e60255
Revises: 
Create Date: 2017-07-28 14:50:54.932693

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import mysql

# revision identifiers, used by Alembic.
revision = '160547e60255'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('admin',
    sa.Column('email', sa.String(length=50), nullable=True),
    sa.Column('password', sa.String(length=50), nullable=True),
    sa.Column('sessionid', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('sessionid')
    )
    op.create_table('college',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('college_name', sa.String(length=100), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('leaderboard',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('promo_code',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('promo_code', sa.String(length=50), nullable=True),
    sa.Column('promo_value', sa.Integer(), nullable=True),
    sa.Column('promo_used', sa.Integer(), nullable=True),
    sa.Column('promo_max_usage', sa.Integer(), nullable=True),
    sa.Column('promo_valid', sa.Integer(), nullable=True),
    sa.Column('promo_multiple_use', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('test',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('leaderboard_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('character', sa.String(length=50), nullable=True),
    sa.Column('price', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['leaderboard_id'], ['leaderboard.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('full_name', sa.String(length=50), nullable=True),
    sa.Column('fb_id', sa.String(length=50), nullable=True),
    sa.Column('google_id', sa.String(length=50), nullable=True),
    sa.Column('fb_oauth_token', sa.String(length=500), nullable=True),
    sa.Column('google_oauth_token', sa.String(length=500), nullable=True),
    sa.Column('google_token_id', sa.String(length=4000), nullable=True),
    sa.Column('email', sa.String(length=50), nullable=True),
    sa.Column('password', sa.String(length=500), nullable=True),
    sa.Column('profile_picture', mysql.LONGTEXT(), nullable=True),
    sa.Column('referral_code', sa.String(length=50), nullable=True),
    sa.Column('referral_bonus', sa.Integer(), nullable=True),
    sa.Column('referral_code_used', sa.String(length=50), nullable=True),
    sa.Column('wallet', sa.Integer(), nullable=True),
    sa.Column('phone_no', sa.BigInteger(), nullable=True),
    sa.Column('college_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['college_id'], ['college.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('college_test',
    sa.Column('college_id', sa.Integer(), nullable=False),
    sa.Column('test_id', sa.Integer(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['college_id'], ['college.id'], ),
    sa.ForeignKeyConstraint(['test_id'], ['test.id'], ),
    sa.PrimaryKeyConstraint('college_id', 'test_id')
    )
    op.create_table('payments',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=True),
    sa.Column('testId', sa.Integer(), nullable=True),
    sa.Column('paymentId', sa.String(length=100), nullable=True),
    sa.Column('paymentAmount', sa.Integer(), nullable=True),
    sa.Column('paymentPromoCode', sa.String(length=50), nullable=True),
    sa.Column('paymentSuccess', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['testId'], ['test.id'], ),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('paytm_tests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('userId', sa.Integer(), nullable=True),
    sa.Column('test_ids', sa.String(length=200), nullable=True),
    sa.Column('transaction_id', sa.String(length=100), nullable=True),
    sa.Column('transaction_value', sa.String(length=50), nullable=True),
    sa.Column('tests_activated', sa.Integer(), nullable=True),
    sa.Column('promo_code', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['userId'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('performance',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('leaderboard_id', sa.Integer(), nullable=False),
    sa.Column('rank', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['leaderboard_id'], ['leaderboard.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'leaderboard_id')
    )
    op.create_table('section',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('test_id', sa.Integer(), nullable=True),
    sa.Column('name', sa.String(length=50), nullable=True),
    sa.Column('created_date', sa.DateTime(), nullable=True),
    sa.Column('total_time', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['test_id'], ['test.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('test_attempt',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('test_id', sa.Integer(), nullable=True),
    sa.Column('is_complete', sa.Boolean(), nullable=True),
    sa.Column('date', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['test_id'], ['test.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('question',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('section_id', sa.Integer(), nullable=True),
    sa.Column('html', mysql.LONGTEXT(), nullable=True),
    sa.Column('points_correct', sa.Integer(), nullable=True),
    sa.Column('points_wrong', sa.Integer(), nullable=True),
    sa.Column('type', sa.String(length=50), nullable=True),
    sa.Column('tita_answer', mysql.LONGTEXT(), nullable=True),
    sa.Column('rc_passage', mysql.LONGTEXT(), nullable=True),
    sa.Column('logic', mysql.LONGTEXT(), nullable=True),
    sa.Column('lod', sa.String(length=50), nullable=True),
    sa.Column('topic', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['section_id'], ['section.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('section_attempt',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('section_id', sa.Integer(), nullable=True),
    sa.Column('test_attempt_id', sa.Integer(), nullable=True),
    sa.Column('time_left', sa.Integer(), nullable=True),
    sa.Column('is_complete', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['section_id'], ['section.id'], ),
    sa.ForeignKeyConstraint(['test_attempt_id'], ['test_attempt.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('choice',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=True),
    sa.Column('html', mysql.LONGTEXT(), nullable=True),
    sa.Column('is_correct', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('question_attempt',
    sa.Column('section_attempt_id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('choice_id', sa.Integer(), nullable=True),
    sa.Column('tita_choice', sa.String(length=50), nullable=True),
    sa.Column('attempt_status', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['choice_id'], ['choice.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['question.id'], ),
    sa.ForeignKeyConstraint(['section_attempt_id'], ['section_attempt.id'], ),
    sa.PrimaryKeyConstraint('section_attempt_id', 'question_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('question_attempt')
    op.drop_table('choice')
    op.drop_table('section_attempt')
    op.drop_table('question')
    op.drop_table('test_attempt')
    op.drop_table('section')
    op.drop_table('performance')
    op.drop_table('paytm_tests')
    op.drop_table('payments')
    op.drop_table('college_test')
    op.drop_table('user')
    op.drop_table('test')
    op.drop_table('promo_code')
    op.drop_table('leaderboard')
    op.drop_table('college')
    op.drop_table('admin')
    # ### end Alembic commands ###
