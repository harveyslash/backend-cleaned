"""
Razorpay Client handler.

This Class is a wrapper around the functions that are required
to Create or Get Details of a Razorpay Order.

Razorpay Order is created and sent back to Client for Payment. Once payment
is confirmed, Order ID is checked for Payment status using the Client.

Usage:

    from Externals import Razorpay
    rz = Razorpay()

    if rz.create_order(receipt_id, amount):
        return razorpay_order_id

"""

import razorpay
from json import loads
from urllib.request import urlopen

from flask import current_app

__author__ = "Swapnil Dey,Harshvardhan Gupta"


class Razorpay:

    @staticmethod
    def _get_client():
        client = razorpay \
            .Client(auth=(current_app.config['RAZOR_KEY_ID'],
                          current_app.config['RAZOR_KEY_SECRET']))
        return client

    @staticmethod
    def create_order(order_id, total_amount):
        """
        Creates an Order with Razorpay with Total Amount and Receipt ID from
        Beatest.

        :param order_id: the order id that is used in Orders table.
                         The receipt id is generated from order id using
                         RAZOR_RECEIPT_FORMAT key in config file

        :param total_amount:
        :return: razorpay_order_id
        """
        order_amount = total_amount * 100
        order_currency = 'INR'

        receipt_id = current_app.config['RAZOR_RECEIPT_FORMAT'].format(
                order_id)

        order = (Razorpay.
                 _get_client()
                 .order
                 .create({'amount':
                              order_amount,
                          'currency':
                              order_currency,
                          'receipt':
                              receipt_id,
                          'payment_capture': 1}))

        assert order['id'], f"Got Null order id from razorpay.Dump: {order}"
        return order['id']

    @staticmethod
    def get_order_status(order_id):
        assert order_id, \
            "Null Order id was provided. Cant check status"

        order = Razorpay._get_client().order.fetch(order_id)
        return order['status']

    @staticmethod
    def capture_payment(payment_id, amount):
        """
        Captures an Order in Razorpay with Total Amount and Payment ID from
        Beatest.

        :param payment_id: the payment id generated by Razorpay

        :param amount: amount
        :return: capturing status
        """
        assert payment_id, \
            "Null Order id was provided. Cant check status"

        status = Razorpay._get_client().payment.capture(payment_id, amount)
        return status['captured']
